#include <player.hh>
#include <card.hh>
#include <iostream>
#include <vector>
#include <algorithm>
#include <random>

const std::string INPUT_AMOUNT_OF_CARDS = "Enter the amount of cards (an even number): ";
const std::string INPUT_SEED = "Enter a seed value: ";
const std::string INPUT_AMOUNT_OF_PLAYERS = "Enter the amount of players (one or more): ";
const std::string INPUT_CARDS = "Enter two cards (x1, y1, x2, y2), or q to quit: ";
const std::string INVALID_CARD = "Invalid card.";
const std::string FOUND = "Pairs found.";
const std::string NOT_FOUND = "Pairs not found.";
const std::string GIVING_UP = "Why on earth you are giving up the game?";
const std::string GAME_OVER = "Game over!";
using Game_row_type = std::vector<Card>;
using Game_board_type = std::vector<std::vector<Card>>;

// Converts the given numeric string to the corresponding integer
// (by calling stoi).
// If the given string is not numeric, returns 0
// (which leads to an invalid card later).

unsigned int stoi_with_check(const std::string& str)
{
    bool is_numeric = true;
    for(unsigned int i = 0; i < str.length(); ++i)
    {
        if(not isdigit(str.at(i)))
        {
            is_numeric = false;
            break;
        }
    }
    if(is_numeric)
    {
        return stoi(str);
    }
    else
    {
        return 0;
    }
}

// Fills the game board, the size of which is rows * columns, with empty cards.

void init_with_empties(Game_board_type& g_board, unsigned int rows, unsigned int columns)
{
    g_board.clear();
    Game_row_type row;
    for(unsigned int i = 0; i < columns; ++i)
    {
        Card card;
        row.push_back(card);
    }
    for(unsigned int i = 0; i < rows; ++i)
    {
        g_board.push_back(row);
    }
}

// Finds the next free position in the game board (g_board), starting from the
// given position start and continuing from the beginning if needed.
// (Called only by the function init_with_cards.)

unsigned int next_free(Game_board_type& g_board, unsigned int start)
{

    // Finding out the number of rows and columns of the game board
    unsigned int rows = g_board.size();
    unsigned int columns = g_board.at(0).size();
    // Aloitetaan annetusta arvosta
    //
    // Starting from the given value
    for(unsigned int i = start; i < rows * columns; ++i)
    {
        if(g_board.at(i / columns).at(i % columns).get_visibility() == EMPTY) // vaihdettu
        {
            return i;
        }
    }

    // Continuing from the beginning
    for(unsigned int i = 0; i < start; ++i)
    {
        if(g_board.at(i / columns).at(i % columns).get_visibility() == EMPTY)
        {
            return i;
        }
    }

    // You should never reach this
    std::cout << "No more empty spaces" << std::endl;
    return rows * columns - 1;
}

// Initializes the given game board (g_board) with randomly generated cards,
// based on the given seed value.
void init_with_cards(Game_board_type& g_board, int seed)
{

    // Finding out the number of rows and columns of the game board

    unsigned int rows = g_board.size();
    unsigned int columns = g_board.at(0).size();

    // Drawing a cell to be filled

    std::default_random_engine randomEng(seed);
    std::uniform_int_distribution<int> distr(0, rows * columns - 1);

    // Wiping out the first random number (that is always the lower bound of the distribution)

    distr(randomEng);

    // If the drawn cell is already filled with a card, next empty cell will be used.
    // (The next empty cell is searched for circularly, see function next_free.)

    for(unsigned int i = 0, c = 'A'; i < rows * columns - 1; i += 2, ++c)
    {

        // Adding two identical cards (pairs) in the game board

        for(unsigned int j = 0; j < 2; ++j)
        {
            unsigned int cell = distr(randomEng);
            cell = next_free(g_board, cell);
            g_board.at(cell / columns).at(cell % columns).set_letter(c);
            g_board.at(cell / columns).at(cell % columns).set_visibility(HIDDEN);
        }
    }
}

// Prints a line consisting of the given character c.
// The length of the line is given in the parameter line_length.
// (Called only by the function print.)

void print_line_with_char(char c, unsigned int line_length)
{
    for(unsigned int i = 0; i < line_length * 2 + 7; ++i)
    {
        std::cout << c;
    }
    std::cout << std::endl;
}

// Prints a variable-length game board with borders.

void print(const Game_board_type& g_board)
{

    // Finding out the number of rows and columns of the game board

    unsigned int rows = g_board.size();
    unsigned int columns = g_board.at(0).size();
    print_line_with_char('=', columns);
    std::cout << "|   | ";
    for(unsigned int i = 0; i < columns; ++i)
    {
        std::cout << i + 1 << " ";
    }
    std::cout << "|" << std::endl;
    print_line_with_char('-', columns);
    for(unsigned int i = 0; i < rows; ++i)
    {
        std::cout << "| " << i + 1 << " | ";
        for(unsigned int j = 0; j < columns; ++j)
        {
            g_board.at(i).at(j).print();
            std::cout << " ";
        }
        std::cout << "|" << std::endl;
    }
    print_line_with_char('=', columns);
}

// Asks the desired product from the user, and calculates the factors of
// the product such that the factor as near to each other as possible.

void ask_product_and_calculate_factors(unsigned int& smaller_factor, unsigned int& bigger_factor)
{
    unsigned int product = 0;
    while(not (product > 0 and product % 2 == 0))
    {
        std::cout << INPUT_AMOUNT_OF_CARDS;
        std::string product_str = "";
        std::getline(std::cin, product_str);
        product = stoi_with_check(product_str);
    }
    for(unsigned int i = 1; i * i <= product; ++i)
    {
        if(product % i == 0)
        {
            smaller_factor = i;
        }
    }
    bigger_factor = product / smaller_factor;
}

//user inputs the amount of players that is neccassery for the game. stoi_with_check transferes the value to integers
//returns the player amount

unsigned int player_amount(unsigned int& amount){
    while(not(amount > 0)){
        std::cout << INPUT_AMOUNT_OF_PLAYERS;
        std::string amount_ = "";
        std::getline(std::cin, amount_);
        amount = stoi_with_check(amount_);
    }
    return amount;
}
//saves the player amount in the players:vector using player amount as parameter for the for loop check.

void player_list(std::vector<Player>& players, unsigned int amount){
    std::string new_name;
    for(unsigned int i = 0; i < amount; i++){
        std::cin>>new_name;
        players.push_back(new_name);
    }
}

//makes sure that the coordiantes that are saved in the vector are valid for the game board.
//also makes sure that the coordinates that are used are not over the game board

bool coordinate_check(std::vector<int> input, int horizontal, int vertical, Game_board_type& game_board){
    int vector_lenght = input.size();
    for(int coordinates = 0;coordinates < vector_lenght;coordinates++){
        if(input.at(coordinates) <= 0){
            return false;
        }
    }
    if(input.at(1) > horizontal || input.at(3) > horizontal || input.at(0) > vertical || input.at(2) > vertical){
        return false;
    }
    if(input.at(1) == input.at(3) and input.at(0) == input.at(2)){
        return false;
    }
    Card& card1 = game_board.at(input.at(1) - 1).at(input.at(0) - 1);
    Card& card2 = game_board.at(input.at(3) - 1).at(input.at(2) - 1);
    if (card2.get_visibility() == EMPTY){
       return false;
    }
    if(card1.get_visibility() == EMPTY){
       return false;
    }
    else{
        return true;
    }
}
Game_board_type new_board(Game_board_type& game_board, std::vector<int> input){
    game_board.at(input.at(1) - 1).at(input.at(0) - 1).turn();
    game_board.at(input.at(3) - 1).at(input.at(2) - 1).turn();
    return game_board;
}
bool game_over(Game_board_type& game_board){
    for(Game_row_type row : game_board){
        for(Card& card_ : row){
            if(card_.get_visibility() != EMPTY){
                return false;
            }
        }
    }
    return true;
}
//saves the pair count to vector winner and prints out with if and else statements how is the outcome
//from the score


// ajonaikainen virhe std::bad_alloc estää ohjelman suorituksen loppuun, liittyy ilmeisesti muistipaikkoihin mutta en osaa korjata.

int main()
{
    Game_board_type game_board;

    std::vector<int> winner;
    std::vector<Player> players;

    unsigned int factor1 = 1;
    unsigned int factor2 = 1;
    unsigned int amount = 0;

    ask_product_and_calculate_factors(factor1, factor2);
    init_with_empties(game_board, factor1, factor2);

    std::string seed_str = "";
    std::cout << INPUT_SEED;
    std::getline(std::cin, seed_str);
    int seed = stoi_with_check(seed_str);
    init_with_cards(game_board, seed);

    player_amount(amount);
    std::cout << "List " << amount << " players: ";
    player_list(players, amount);
    print(game_board);

    int turnSuccess = turn(players, factor1, factor2, game_board);
    if (turnSuccess != EXIT_SUCCESS){
        win(players, winner);
    }
    return EXIT_SUCCESS;
}
